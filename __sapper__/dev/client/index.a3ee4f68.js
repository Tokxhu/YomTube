import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, J as onMount, f as element, h as text, j as claim_element, k as children, l as claim_text, m as detach_dev, o as add_location, p as insert_dev, q as append_dev, u as space, v as empty, w as query_selector_all, x as claim_space, n as noop, K as destroy_each } from './index.f750bc7d.js';

/* src/routes/index.svelte generated by Svelte v3.17.3 */
const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (27:0) {#each videos as clean}
function create_each_block(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("clean.title");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "clean.title");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 27, 2, 532);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(27:0) {#each videos as clean}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let each_1_anchor;
	let each_value = /*videos*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-oofwcx\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			document.title = "Sapper project template";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*videos*/ 1) {
				const old_length = each_value.length;
				each_value = /*videos*/ ctx[0];
				let i;

				for (i = old_length; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (!each_blocks[i]) {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (i = each_value.length; i < old_length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let videos = [];

	onMount(async () => {
		try {
			const response = await fetch("http://knark.club:69/api/videos");
			$$invalidate(0, videos = await response.json());
			console.log(videos);
			if (videos.length == 0) throw new Error("No videos found");
		} catch(error) {
			console.error("Found some error");
			console.error(error);
		}
	});

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("videos" in $$props) $$invalidate(0, videos = $$props.videos);
	};

	return [videos];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYTNlZTRmNjguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgbGV0IHZpZGVvcyA9IFtdO1xuXG4gIG9uTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiaHR0cDovL2tuYXJrLmNsdWI6NjkvYXBpL3ZpZGVvc1wiKTtcbiAgICAgIHZpZGVvcyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGNvbnNvbGUubG9nKHZpZGVvcyk7XG4gICAgICBpZiAodmlkZW9zLmxlbmd0aCA9PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJObyB2aWRlb3MgZm91bmRcIik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJGb3VuZCBzb21lIGVycm9yXCIpO1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfVxuICB9KTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPlNhcHBlciBwcm9qZWN0IHRlbXBsYXRlPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbnsjZWFjaCB2aWRlb3MgYXMgY2xlYW59XG4gIDxwPmNsZWFuLnRpdGxlPC9wPlxuey9lYWNofVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBMEJPLEdBQU07OztnQ0FBWCxNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBQUMsR0FBTTs7O3dDQUFYLE1BQUk7Ozs7Ozs7Ozs7d0JBQUosTUFBSTs7OztvQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0F2QkEsTUFBTTs7Q0FFVixPQUFPOztTQUVHLFFBQVEsU0FBUyxLQUFLLENBQUMsaUNBQWlDO21CQUM5RCxNQUFNLFNBQVMsUUFBUSxDQUFDLElBQUk7R0FDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNO09BQ2QsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLFlBQVksS0FBSyxDQUFDLGlCQUFpQjtVQUNsRCxLQUFLO0dBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0I7R0FDaEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
